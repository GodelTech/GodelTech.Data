# Build for .NET Core project

trigger:
  batch: true
  branches:
    include:
    - '*'

pr:
  branches:
    include:
    - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: 'Build'
  variables:
    versionSuffix: ''
  jobs:
    - job: Build
      displayName: 'Build'
      steps:
      # Set Version Suffix
      - task: Bash@3
        displayName: 'Set Version Suffix'
        inputs:
          targetType: 'inline'
          script: |
            echo "##vso[task.setvariable variable=versionSuffix]ci-$BUILD_BUILDNUMBER"
        condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

      # Build .NET Core
      - task: SonarCloudPrepare@1
        displayName: 'Prepare analysis on SonarCloud'
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'godeltech'
          scannerMode: 'MSBuild'
          projectKey: '$(Build.DefinitionName)'
          projectName: '$(Build.DefinitionName)'
          extraProperties: |
            sonar.cs.opencover.reportsPaths="$(Agent.TempDirectory)/**/coverage.opencover.xml"
            sonar.coverage.exclusions="tools/build/*"

      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK'
        inputs:
          packageType: 'sdk'
          version: '3.x'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
          feedsToUse: 'select'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet build'
        inputs:
          command: 'build'
          projects: '**/*.csproj'
          arguments: '--configuration $(buildConfiguration) /p:VersionSuffix="$(versionSuffix)"'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet test'
        inputs:
          command: 'test'
          projects: '**/*[Tt]ests/*.csproj'
          arguments: '--configuration $(buildConfiguration) --settings $(System.DefaultWorkingDirectory)/CodeCoverage.runsettings --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true'

      - task: DotNetCoreCLI@2
        displayName: 'Install ReportGenerator tool'
        inputs:
          command: 'custom'
          custom: 'tool'
          arguments: 'install --tool-path . dotnet-reportgenerator-globaltool'

      - script: ./reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
        displayName: 'Create reports'

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'

      # Temp solution because of issue with SonarCloud
      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK 2.2.x for SonarCloud'
        inputs:
          packageType: 'sdk'
          version: '2.2.x'

      - task: SonarCloudAnalyze@1
        displayName: 'Run Code Analysis'

      - task: SonarCloudPublish@1
        displayName: 'Publish Quality Gate Result'
        inputs:
          pollingTimeoutSec: '300'

      - task: sonarcloud-buildbreaker@2
        displayName: 'Break build on quality gate failure'
        inputs:
          sonarCloud: 'SonarCloud'
          organization: 'godeltech'

      # Pack .NET Core NuGet packages
      - task: DotNetCoreCLI@2
        displayName: 'dotnet pack'
        inputs:
          command: 'pack'
          packagesToPack: '**/*.csproj'
          buildProperties: 'VersionSuffix="$(versionSuffix)"'
          packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
          nobuild: true
          versioningScheme: 'off'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Pipeline Artifact: NuGet Packages'
        inputs:
          path: '$(Build.ArtifactStagingDirectory)/packages'
          artifact: 'NuGet Packages'

- stage: Artifacts
  displayName: 'Artifacts'
  dependsOn: Build
  jobs:
    - deployment: Publish
      displayName: 'Publish packages'
      environment: 'Artifacts'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: NuGetCommand@2
              displayName: 'NuGet push'
              inputs:
                command: 'push'
                packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
                nuGetFeedType: 'internal'
                publishVstsFeed: '19324bbd-9baf-4407-b86d-3e7f0d145399/f1c51ba0-5c70-43f8-bc9d-842fcaec53ee'

- stage: NuGet
  displayName: 'NuGet'
  dependsOn: Artifacts
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
    - deployment: Publish
      displayName: 'Publish packages'
      environment: 'NuGet'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: NuGetCommand@2
              displayName: 'NuGet push'
              inputs:
                command: 'push'
                packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
                nuGetFeedType: 'external'
                publishFeedCredentials: 'NuGet'
